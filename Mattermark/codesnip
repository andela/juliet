
# useful queries
# 'http://user:password@andela.com', 'http://user:password@abucketlist.herokuapp.com', 'http://user:password@flye.herokuapp.com', 'http://user:password@mylyst.herokuapp.com'
#, 'http://user:password@microsoft.com', 'http://user:password@google.com', 'http://user:password@twitter.com'
# , 'http://user:password@bendozy.com'
#MatterMark.companies.select{|c| (c.data && c.data['website']) }.collect{|c| c.data['website']}
# MatterMark.companies.


# File.open(FILENAME, 'r') do |f|
#   puts f.size
#   # f.each_line do |name|
#   #   puts name
#   #   search(name)
#   # end
# end
  # puts company


  # if company_group == a.name
  #   a
  # else
  # end


  # .map{ |company, value|
  #   value.to_h
  # }
  # all.map{ |company| company.to_h }


  # FILENAME = 'test_companies.txt'


  # def save
  #   companies.each{
  #
  #   }
  # end


  # <<-EOS
  # EOS
  #



      # def order_by_alexa_and_page
      #   all.each do |_company_group, value|
      #     value.sort! do|a, b|
      #       b.rank.to_i <=> a.rank.to_i
      #     end
      #   end
      # end


      # b.rank.to_i <=> a.rank.to_i


      # Company.order


      # {name: @name, mmid: @mmid, url: @url, rank: @rank, mattermark_score: @mmscore ,group: @group }

      # PageRankr.proxy_service = PageRankr::ProxyServices::Random.new(['http://user:password@google:80.com'])



      puts search
      # comp[]
        puts "======>>>>#{company.name}<<<<<====="
          # return company &&



          # File.read_lines_with_block(FILENAME) do |company|
            # company.strip!
            # puts company
            # search(company)
          # end



                    # _val.each(&:to_s)
                    # _val.each{|_each_val|
                      # f.puts _each_val.to_s
                    # }



                    # File.class_eval do
                    #   def self.read_lines_with_block(name)
                    #     foreach(name) do |l|
                    #       yield l if block_given?
                    #     end
                    #   end
                    # end
